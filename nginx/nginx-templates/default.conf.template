
error_log    /var/log/nginx/error.log;

# HTTP set-up
server {
    listen 80;
    listen [::]:80;
    server_name opencast-dsa.local;

    # Enforce HTTPS by redirecting requests
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS set-up
server {
    listen      443 ssl http2;
    listen [::]:443 ssl http2;
    server_name opencast-dsa.local;

    ssl_certificate_key /etc/ssl/certs/opencast/opencast.key;
    ssl_certificate     /etc/ssl/certs/opencast/opencast.crt;

    # Accept large ingests. There should be no limit since Opencast may get
    # really large ingests.
    client_max_body_size 0;

    # Proxy configuration for Opencast
    location / {

        # Make sure to pass the real addresses as well as the fact that
        # outwards we are using HTTPS to Opencast.
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;

        # Pass requests to this location. This expects Opencast to be
        # running locally on port 8080 which should be the default set-up.
        proxy_pass              ${APPLICATION_URL};
        

        # Make sure to redirect location headers to HTTPS. This is just a
        # precaution and shouldn't strictly be necessary but it did prevent
        # some issues in the past and it does not cost much performance.
        proxy_redirect          http://$host https://$host;

        # Make sure to serve cookies only via secure connections.
        proxy_cookie_flags ~ secure httponly;
        # When using Nginx <1.19.3 replace the above 'proxy_cookie_flags' line
        # with the (uncommented) 'proxy_cookie_path' line below.
        #proxy_cookie_path / "/; HTTPOnly; Secure";

        # Depending on your integration, you may also want to allow cookies
        # to be used on other sites. In that case, use this instead:
        #proxy_cookie_path / "/; HTTPOnly; Secure; SameSite=None";

        # Do not buffer responses
        proxy_buffering         off;

        # Do not buffer requests
        proxy_request_buffering off;
    }
}
